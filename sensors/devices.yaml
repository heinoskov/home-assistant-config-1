#
# UniFi Security Gateway
#
# @see `secrets-dummy.yaml`
#
# @link https://github.com/custom-components/sensor.unifigateway
#
- platform: unifigateway
  host: !secret unifi_host
  port: !secret unifi_port
  username: !secret unifi_username
  password: !secret unifi_password
  monitored_conditions:
    - alerts
    # - firmware
    - lan
    - wan
    - wlan
    # - www

- platform: template
  sensors:
    unifi_gateway_lan_clients:
      friendly_name: Ethernet Clients
      icon_template: >-
        {{ state_attr('sensor.unifi_gateway_lan', 'icon') }}
      value_template: >-
        {% set guest = state_attr('sensor.unifi_gateway_lan', 'num_guest') | int %}
        {% set iot = state_attr('sensor.unifi_gateway_lan', 'num_iot') | int %}
        {% set user = state_attr('sensor.unifi_gateway_lan', 'num_user') | int %}

        {{ guest + iot + user }}

    unifi_gateway_lan_guests:
      friendly_name: Ethernet Guests
      icon_template: >-
        {{ state_attr('sensor.unifi_gateway_lan', 'icon') }}
      value_template: >-
        {{ state_attr('sensor.unifi_gateway_lan', 'num_guest') }}

    unifi_gateway_lan_iots:
      friendly_name: Ethernet IoT
      icon_template: >-
        {{ state_attr('sensor.unifi_gateway_lan', 'icon') }}
      value_template: >-
        {{ state_attr('sensor.unifi_gateway_lan', 'num_iot') }}

    unifi_gateway_lan_users:
      friendly_name: Ethernet Users
      icon_template: >-
        {{ state_attr('sensor.unifi_gateway_lan', 'icon') }}
      value_template: >-
        {{ state_attr('sensor.unifi_gateway_lan', 'num_user') }}

    unifi_gateway_wlan_clients:
      friendly_name: Wireless Clients
      icon_template: >-
        {{ state_attr('sensor.unifi_gateway_wlan', 'icon') }}
      value_template: >-
        {% set guest = state_attr('sensor.unifi_gateway_wlan', 'num_guest') | int %}
        {% set iot = state_attr('sensor.unifi_gateway_wlan', 'num_iot') | int %}
        {% set user = state_attr('sensor.unifi_gateway_wlan', 'num_user') | int %}

        {{ guest + iot + user }}

    unifi_gateway_wlan_guests:
      friendly_name: Wireless Guests
      icon_template: >-
        {{ state_attr('sensor.unifi_gateway_wlan', 'icon') }}
      value_template: >-
        {{ state_attr('sensor.unifi_gateway_wlan', 'num_guest') }}

    unifi_gateway_wlan_iots:
      friendly_name: Wireless IoT
      icon_template: >-
        {{ state_attr('sensor.unifi_gateway_wlan', 'icon') }}
      value_template: >-
        {{ state_attr('sensor.unifi_gateway_wlan', 'num_iot') }}

    unifi_gateway_wlan_users:
      friendly_name: Wireless Users
      icon_template: >-
        {{ state_attr('sensor.unifi_gateway_wlan', 'icon') }}
      value_template: >-
        {{ state_attr('sensor.unifi_gateway_wlan', 'num_user') }}

    unifi_gateway_processor_use:
      friendly_name: UniFi Gateway Processor Use
      unit_of_measurement: '%'
      icon_template: mdi:chip
      value_template: >-
        {{ state_attr('sensor.unifi_gateway_wan', 'gw_system-stats').cpu | int }}

    unifi_gateway_memory_use:
      friendly_name: UniFi Gateway Memory Use
      unit_of_measurement: '%'
      icon_template: mdi:memory
      value_template: >-
        {{ state_attr('sensor.unifi_gateway_wan', 'gw_system-stats').mem | int }}

    wan_ip_address:
      friendly_name: WAN IP Address
      icon_template: mdi:wan
      value_template: >-
        {{ state_attr('sensor.unifi_gateway_wan', 'wan_ip') }}

    unifi_uptime:
      friendly_name: UniFi Gateway Uptime
      icon_template: mdi:av-timer
      value_template: >-
        {% set seconds = state_attr('sensor.unifi_gateway_wan', 'gw_system-stats').uptime %}

        {% if seconds != 'unknown' %}
          {% set seconds = seconds|int %}
          {% set days = (seconds / 86400)|int %}
          {% set seconds = seconds % 86400 %}
          {% set hours = (seconds / 3600)|int %}
          {% set seconds = seconds % 3600 %}
          {% set minutes = (seconds / 60)|int %}
          {% set seconds = seconds % 60 %}

          {% if hours == 0 and minutes == 0 %}
            {{ time }} seconds
          {% else %}
            {%- if days > 0 -%}
              {%- if days == 1 -%}
                1 day
              {%- else -%}
                {{ days }} days
              {%- endif -%}
            {%- endif -%}
            {%- if hours > 0 and days < 7 -%}
              {%- if days > 0 -%}
                {{ ', ' }}
              {%- endif -%}
              {%- if hours == 1 -%}
                1 hour
              {%- else -%}
                {{ hours }} hours
              {%- endif -%}
            {%- endif -%}
            {%- if days == 0 and minutes > 0 -%}
              {%- if hours > 0 -%}
                {{ ', ' }}{{ minutes }} min
              {%- else -%}
                {%- if minutes == 1 -%}
                  1 minute
                {%- else -%}
                  {{ minutes }} minutes
                {%- endif -%}
              {%- endif -%}
            {%- endif -%}
          {% endif %}
        {% else %}
          unknown
        {% endif %}

#
# Samsung SyncThru Laser Printer (now HP)
#
# The drum reports on its remaining percentage, while the toner also returns
# its print count, allowing for more accurate calculations.
#
# In order to keep configuration and logic separate, values for
# `printer_drum_capacity` and `printer_toner_capacity` are integers set in the
# secrets file.
#
# Do note that the `resource` parameter must not have a trailing slash,
# otherwise the sensor will fail.
#
# @see `secrets-dummy.yaml`
#
# @link https://www.home-assistant.io/components/sensor.syncthru/
#
- platform: syncthru
  resource: !secret syncthru_resource
  name: Printer

- platform: template
  sensors:
    printer_drum_capacity:
      friendly_name: Drum Capacity
      icon_template: mdi:printer
      unit_of_measurement: 'pages'
      value_template: !secret printer_drum_capacity

    printer_drum_remain:
      friendly_name: Drum Remaining
      icon_template: mdi:printer
      unit_of_measurement: 'pages'
      value_template: >-
        {% set capacity = states('sensor.printer_drum_capacity') | int(-1) %}
        {% set drum = states('sensor.printer_drum_black') | int(-1) %}

        {% if capacity > 0 and drum >= 0 %}
          {{ (capacity * drum / 100) | round }}
        {% else %}
          unknown
        {% endif %}

    printer_drum_use:
      friendly_name: Drum Use
      icon_template: mdi:printer
      unit_of_measurement: 'pages'
      value_template: >-
        {% set capacity = states('sensor.printer_drum_capacity') | int(-1) %}
        {% set drum = states('sensor.printer_drum_black') | int(-1) %}

        {% if capacity > 0 and drum >= 0 %}
          {{ (capacity * (100 - drum) / 100) | round }}
        {% else %}
          unknown
        {% endif %}

    printer_toner_capacity:
      friendly_name: Toner Capacity
      icon_template: mdi:printer
      unit_of_measurement: 'pages'
      value_template: !secret printer_toner_capacity

    printer_toner_remain:
      friendly_name: Toner Remaining
      icon_template: mdi:printer
      unit_of_measurement: 'pages'
      value_template: >-
        {% set capacity = states('sensor.printer_toner_capacity') | int(-1) %}
        {% set toner = state_attr('sensor.printer_toner_black', 'cnt') | int(-1) %}

        {% if capacity > 0 and toner >= 0 %}
          {{ capacity - toner }}
        {% else %}
          unknown
        {% endif %}

    printer_toner_use:
      friendly_name: Toner Use
      icon_template: mdi:printer
      unit_of_measurement: 'pages'
      value_template: >-
        {% set toner = state_attr('sensor.printer_toner_black', 'cnt') | int(-1) %}

        {% if toner >= 0 %}
          {{ toner }}
        {% else %}
          unknown
        {% endif %}
